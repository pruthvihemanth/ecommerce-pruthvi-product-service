# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

# === service account - ecommerce-pruthvi-sa@ecommerce-pruthvi-hemanth.iam.gserviceaccount.com
# == project id 993068694107

name: Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: ecommerce-pruthvi-hemanth
  GAR_LOCATION: asia-south1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: ecommerce-pruthvi-backend    # TODO: update to cluster name
  GKE_ZONE: asia-south1   # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-prod # TODO: update to deployment  name
  REPOSITORY: ecommerce-pruthvi-product-service # TODO: update to Artifact Registry docker repository name
  IMAGE: ecommerce-pruthvi-product-service
  APP: ecommerce-pruthvi-product-service
  RELEASE_NAME: prod
  REGION: asia-south1 


jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Configure the Workload Identity Federation and generate an access  token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
       # token_format: 'access_token'
        workload_identity_provider: 'projects/993068694107/locations/global/workloadIdentityPools/ecommerce-pruthvi-idpool/providers/ecommerce-pruthvi-wlprovider'
        service_account: 'ecommerce-pruthvi-sa@ecommerce-pruthvi-hemanth.iam.gserviceaccount.com'


    # - name: Docker configuration
    #   run: |-
    #     echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev

    # # Get the GKE credentials so we can deploy to the gke cluster
    # - name: Set up GKE credentials
    #   uses: google-github-actions/get-gke-credentials@v0
    #   with:
    #     cluster_name: ${{ env.GKE_CLUSTER }}
    #     location: ${{ env.GKE_ZONE }}

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
         project_id: '${{ env.PROJECT_ID }}'


    - name: 'Docker auth'
      run: |-
         gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev
 

    - name: 'Build and push the container'
      run: |-
         docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.APP }}/${{ env.APP }}:${{ github.sha }}" .
         docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.APP }}/${{ env.APP }}:${{ github.sha }}"

    - name: 'Create release name'
      run: |-
         echo "RELEASE_NAME=${{ env.APP }}-${GITHUB_SHA::7}-${GITHUB_RUN_NUMBER}" >> ${GITHUB_ENV}

         
    - name: Create Cloud Deploy Release
      uses: google-github-actions/create-cloud-deploy-release@v0
      with:
         delivery_pipeline: 'ecommerce-pruthvi'
         name: '${{ env.RELEASE_NAME }}'
         region: '${{ env.REGION }}'
         skaffold_file: 'skaffold.yaml'
         description: 'new changes'
         images: 'app=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.APP }}/${{ env.APP }}:${{ github.sha }}'
         
    # Slack Integration  
    - name: Set up Slack Notifications
      uses: act10ns/slack@v1
      with:
        status: ${{ job.status }}
        steps: ${{ toJson(steps) }} 
        channel: '#e-commerce-backend-deployments'
      if: always()    
